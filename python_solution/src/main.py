import logging
from src.factory import HolidayFactory

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BusinessDayCounter:
    def __init__(self, day_utils_obj):
        self.day_utils_obj = day_utils_obj

    def get_total_days(self, start_date, end_date, total_days):
        """
        This method calculates the total number of days between two dates and adds it to the provided total days count.
        It uses a utility method to count the days, logging any exceptions that occur during the process.

        :param start_date: datetime object indicating the start date of the range.
        :param end_date: datetime object indicating the end date of the range.
        :param total_days: The current total days, to which the days between the start and end date will be added.

        :return: int - The updated total days after adding the calculated number of days between the two dates.
                  Returns 0 if an exception occurs.
        """
        try:
            total_days += self.day_utils_obj.days_count_between_dates(start_date=start_date, end_date=end_date)
            return total_days
        except Exception as e:
            logger.error(e)
            return 0

    def get_holidays(self, start_date, end_date, public_holidays, public_holiday_list=None, holiday_rules=None):
        """
            This method calculates the public holidays between two dates, considering both static public holidays
            and holidays generated by holiday rules.

            :param start_date: datetime object indicating the start date of the range.
            :param end_date: datetime object indicating the end date of the range.
            :param public_holidays: An integer representing the initial count of public holidays.
            :param public_holiday_list: A list of datetime objects representing static public holidays (optional).
            :param holiday_rules: A list of dictionaries containing rules for dynamic holiday generation (optional).

            :return: int - The updated count of public holidays after considering static holidays and rule-generated holidays.
            """

        if public_holiday_list:
            public_holidays += self.day_utils_obj.calculate_public_holidays(start_date=start_date, end_date=end_date,
                                                                   public_holiday_list=public_holiday_list)
        if holiday_rules:
            holiday_objects = HolidayFactory(start_date=start_date, end_date=end_date,
                                                 holiday_rules=holiday_rules).get_objects()

            public_holiday_generated_by_rules = [item for sublist in holiday_objects for item in sublist.get_holiday()]
            public_holidays += self.day_utils_obj.calculate_public_holidays(start_date=start_date, end_date=end_date,
                                                                   public_holiday_list=public_holiday_generated_by_rules)
        return public_holidays

    def weekdays_between_two_dates(self, start_date, end_date):
        """
        This methods calculates the number of weekdays between two dates.
        :param start_date: @type object -> datetime, which indicates start date of between two dates.
        :param end_date: @type object -> datetime, which indicates start date of between two dates.
        :return: @types int
        """
        logging.info(f"Calculating weekdays between {start_date} and {end_date}.")

        total_days = 0
        total_days += self.get_total_days(start_date=start_date, end_date=end_date, total_days=total_days)
        if total_days == 0: return 0

        total_weekend_days = self.day_utils_obj.total_weekend_days_count(start_date=start_date, total_days=total_days)
        total_week_days = total_days - total_weekend_days

        logging.info(f"Total days: {total_days}, Weekend days: {total_weekend_days}, Weekdays: {total_week_days}")

        return total_week_days

    def business_days_between_two_dates(self, start_date, end_date, public_holiday_list=None, holiday_rules=None):
        """
             This methods calculates the number of business days between two dates up to some conditions.
             :param start_date: @type object -> datetime, which indicates start date of between two dates.
             :param end_date: @type object -> datetime, which indicates start date of between two dates.
             :param public_holiday_list: @type list of datetimes -> static public holidays.
             :param holiday_rules: @type list of dictionary -> ruled based public holidays .

             :return: @types int
             """
        logging.info(f"Business days between {start_date} and {end_date}.")
        total_days, public_holidays = 0, 0

        total_days += self.get_total_days(start_date=start_date, end_date=end_date, total_days=total_days)
        if total_days == 0: return 0

        total_weekend_days = self.day_utils_obj.total_weekend_days_count(start_date=start_date, total_days=total_days)
        public_holidays += self.get_holidays(start_date=start_date, end_date=end_date, public_holidays=public_holidays,
                                             public_holiday_list=public_holiday_list, holiday_rules=holiday_rules)
        total_business_days = total_days - total_weekend_days - public_holidays

        logging.info(f"Total days: {total_days}, Weekend days: {total_weekend_days}, Business: {total_business_days}")

        return total_business_days
